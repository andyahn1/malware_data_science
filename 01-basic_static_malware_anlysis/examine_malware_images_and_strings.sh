#!/bin/bash

# Examining Malware Images

# Make a directory to hold the extracted image from a .exe file
mkdir images

# Use wrestool to extract resources from Microsoft Windows binaries and store them in "images" folder.
wrestool -x fakepdfmalware.exe -o images

# Make a directory to hold the 
mkdir output

# Use icotool to convert Win32 icon (.ico) or cursor (.cur) files in "images" folder into PNG files and store them in "output" folder
# Some image viewer tools can open .ico or .cur, but not every tools can. Let's convert .ico into PNG format so that standard image viewer tools can open it.
icotool -x images/* -o output/

# For this tutorial, use "eog" which is an image viewer for GNOME to open the image. (the image will be opened and visible on the OS's GUI)
eog output/fakepdfmalware.exe_14_101_2052_1_48x48x24.png


# ============================================================

# Examine Malware Strings

# Dump the malware program's printable strings and create a text file
# FYI, "strings" command ignores blank lines. You can use "cat" command if you want.
strings ircbot.exe > ircbotstring.txt

# Now you can find keywords that you are looking for. For this tutorial, let's extract lines including the word DOWNLOAD.
cat ircbotstring.txt | grep DOWNLOAD

# The output should look like this
# ============================================================
# [DOWNLOAD]: Bad URL, or DNS Error: %s.
# [DOWNLOAD]: Update failed: Error executing file: %s.
# [DOWNLOAD]: Downloaded %.1fKB to %s @ %.1fKB/sec. Updating.
# [DOWNLOAD]: Opened: %s.
# [DOWNLOAD]: Downloaded %.1f KB to %s @ %.1f KB/sec.
# [DOWNLOAD]: CRC Failed (%d != %d).
# [DOWNLOAD]: Filesize is incorrect: (%d != %d).
# [DOWNLOAD]: Update: %s (%dKB transferred).
# [DOWNLOAD]: File download: %s (%dKB transferred).
# [DOWNLOAD]: Couldn't open file: %s.
# [DOWNLOAD]: Failed to start transfer thread, error: <%d>.
# [DOWNLOAD]: Downloading URL: %s to: %s.
# ============================================================

# a few lines after the [DOWNLOAD] lines, you'll see these lines:
# ============================================================
# [HTTPD]: Error: server failed, returned: <%d>.
# GET
# HTTP/1.0 200 OK
# Server: myBot
# Cache-Control: no-cache,no-store,max-age=0
# pragma: no-cache
# Content-Type: %s
# Content-Length: %i
# Accept-Ranges: bytes
# Date: %s %s GMT
# Last-Modified: %s %s GMT
# Expires: %s %s GMT
# Connection: close
# HTTP/1.0 200 OK
# Server: myBot
# Cache-Control: no-cache,no-store,max-age=0
# pragma: no-cache
# Content-Type: %s
# Accept-Ranges: bytes
# Date: %s %s GMT
# Last-Modified: %s %s GMT
# Expires: %s %s GMT
# Connection: close
# HH:mm:ss
# ddd, dd MMM yyyy
# application/octet-stream
# text/html
# ============================================================
# ircbot.exe can act as a web server that the attcker can connect to.
